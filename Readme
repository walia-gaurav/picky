** Coding Progress **
Client Side :
- Login
- Signup
- Logout
- Uploading Picky (2 images, 1 description, 1 GPSCoordinates)

Server Side :
- LoginServlet
- LogoutServlet
- SignUpServlet
- UploadServlet
- DeletePickyServlet
- TimelineServlet
- UpdatePasswordServlet
- MyPickiesServlet

** Coding left **
- Fetching the pickies in client side.
- Displaying historic pickies in ‘My Pickies’ section.
- Managing ‘My account’
- Marking pickies as complete.
- Using Gyro to emulate voting for pickies.

** Files included **

* app folder
* Readme
* picky-rest-api folder
* Documentation folder
	** ClassDiagram.png
	** screenshots folder
	** BusinessModel.png
	** ClassDiagram.png
	** DB-Schema.png
	** Documentation.pdf
	** ProjectRequirements.pdf


The code is organized in different packages:

* activity
Contain the two main activities of the app: HomeActivity and MainActivity. The first one will contain all the operations an user can do when he is logged in. The second one is just the login and sign up screents.

* entities
Differents models used in the app: Location, Photo, User, Vote and Picky. 

* fragment
Fragments used in the activities: AccountFragment, LoginFragment, LogoutFragment, ProfileFragment, PublicFragment, SignUpFragment and UploadFragment.

* tasks
Classes that perform operations asynchronously: ImageDownloaderTask, ImageDownloaderButtonCallback and ImageDownloaderCallback.

* ws
Communication classes with web services (APIs). It has a remote package with three interfaces: PickyConsumerWebServiceInterface, PickyProducerWebServiceInterface and UserWebServiceInterface.

* exceptions
All custom exceptions and handles used in the code.

* db
Classes to perform DB operations using SQLite.

How to run:

Before running the server (picky-engine) do the following:

Create the following directory: /var/webapp/upload/

sudo mdkir -p /var/webapp/upload/
sudo chmod -R 777 /var/webapp/upload/

In the TOMCAT home folder go to conf folder and edit server.xml:

Add <Context docBase="/var/webapp/upload" path="/uploads" /> inside <Host> </Host> tags.

When running TOMCAT make sure that same folder is the CATALINA_HOME variable.

In Intellij you will need to edit the run/debug settings and add this enviroment variable in the startup.

After doing this run the server.

Find out the ip and context path the server is running.

Open Picky project in Android Studio. Open the file name BaseService and put in IP field the host (ex: http://172.29.93.234:8080) and in HOST_ENDPOINT put the context between %s/ and /api (ex: %s/picky-engine/api).

Build the app and transfer it into an Android device. This is fair simple to do using Android Studio.

Use Picky :)


